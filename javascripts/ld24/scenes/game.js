// Generated by CoffeeScript 1.3.3
var GameScene, _base, _ref, _ref1;

if ((_ref = window.LD24) == null) {
  window.LD24 = {};
}

if ((_ref1 = (_base = window.LD24).Scenes) == null) {
  _base.Scenes = {};
}

window.LD24.Scenes.Game = GameScene = (function() {

  function GameScene(game, screen) {
    this.game = game;
    this.screen = screen;
    this.offsetX = 0;
    this.tickCount = 0;
    this.speedX = 1;
    this.fragment = new LD24.Fragments.Basic(this.game, this, this.screen);
    this.nextFragment = null;
    this.player = new LD24.Mobs.Player(this.game, this, this.screen);
    this.mobs = [];
  }

  GameScene.prototype.render = function() {
    var mob, _i, _len, _ref2, _ref3, _results;
    this.fragment.render();
    if ((_ref2 = this.nextFragment) != null) {
      _ref2.render();
    }
    this.player.render();
    this.renderGUI();
    _ref3 = this.mobs;
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      mob = _ref3[_i];
      _results.push(mob.render());
    }
    return _results;
  };

  GameScene.prototype.renderGUI = function() {
    this.screen.save();
    this.screen.context.fillStyle = 'rgba(255,255,255,1)';
    this.screen.context.fillRect(0, 0, this.screen.width, 16);
    this.screen.drawText(this.getTravelledMeters() + 'm', 8, 4);
    return this.screen.restore();
  };

  GameScene.prototype.tick = function() {
    var mob, _i, _len, _ref2, _ref3, _ref4;
    this.offsetX -= this.speedX;
    this.fragment.offsetX -= this.speedX;
    if ((_ref2 = this.nextFragment) != null) {
      _ref2.offsetX -= this.speedX;
    }
    this.player.x = this.offsetX * -1 + 20;
    this.speedX += 0.0001;
    this.fragment.tick();
    if ((_ref3 = this.nextFragment) != null) {
      _ref3.tick();
    }
    this.player.tick();
    if (this.tickCount % 20 === 0) {
      if (Math.floor(Math.random() * 10) === 0) {
        mob = new LD24.Mobs.Mob(this.game, this, this.screen);
        mob.x = this.offsetX * -1 + this.screen.width;
        this.mobs.push(mob);
      }
    }
    _ref4 = this.mobs;
    for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
      mob = _ref4[_i];
      if (mob.x < this.offsetX * -1 - 16) {
        mob.remove();
      }
      if (mob.removed) {
        this.mobs = _.without(this.mobs, mob);
      }
      mob.tick();
    }
    this.tickCount++;
    if (Math.abs(this.fragment.offsetX) >= this.fragment.width - this.screen.width && !this.nextFragment) {
      this.nextFragment = new LD24.Fragments.EightBit(this.game, this, this.screen);
      this.nextFragment.offsetX = this.screen.width;
    }
    if (Math.abs(this.fragment.offsetX) >= this.fragment.width) {
      this.fragment = this.nextFragment;
      this.nextFragment = null;
      return console.log("setting current fragment");
    }
  };

  GameScene.prototype.getTravelledMeters = function() {
    return Math.round(Math.abs(this.offsetX) / 16);
  };

  return GameScene;

})();
