// Generated by CoffeeScript 1.3.3
var SplashScene, _base, _ref, _ref1,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

if ((_ref = window.LD24) == null) {
  window.LD24 = {};
}

if ((_ref1 = (_base = window.LD24).Scenes) == null) {
  _base.Scenes = {};
}

window.LD24.Scenes.SplashScene = SplashScene = (function(_super) {

  __extends(SplashScene, _super);

  function SplashScene(game, screen) {
    var _this = this;
    this.game = game;
    this.screen = screen;
    this.selectPrevItem = __bind(this.selectPrevItem, this);

    this.selectNextItem = __bind(this.selectNextItem, this);

    this.zoom = 1;
    this.scrollX = 0;
    this.scrollY = 0;
    this.player = new LD24.Mobs.Player(this.game, this, this.screen);
    this.player.scale = this.player.toScale = 0.7;
    this.player.x = 200;
    this.player.y = 125;
    this.player.speedRotation = 0.5;
    this.particles = [];
    this.generateParticles();
    this.mobs = [this.player];
    $('canvas, .splash').fadeIn('slow');
    this.game.unpause();
    jwerty.key('↓', this.selectNextItem);
    jwerty.key('↑', this.selectPrevItem);
    jwerty.key('enter', function(e) {
      var selectedMenuItem;
      selectedMenuItem = $('.splash .menu .active');
      $(document).unbind('.jwerty');
      if (selectedMenuItem.hasClass('campaign')) {
        _this.game.loadCampaign();
      }
      if (selectedMenuItem.hasClass('endless')) {
        _this.game.loadEndless();
      }
      if (selectedMenuItem.hasClass('about')) {
        return _this.showAbout();
      }
    });
    $('.splash .menu li').mouseenter(function() {
      $('.splash .menu li').removeClass('active');
      return $(this).addClass('active');
    });
    $('.campaign').click(function() {
      _this.game.loadCampaign();
      return $(document).unbind('.jwerty');
    });
    $('.endless').click(function() {
      $(document).unbind('.jwerty');
      return _this.game.loadEndless();
    });
    $('li.about').click(function() {
      return _this.showAbout();
    });
    jwerty.key('↑,↑,↓,↓,←,→,←,→,B,A', function() {
      var i, mob, _i, _results;
      _results = [];
      for (i = _i = 0; _i < 100; i = ++_i) {
        mob = new LD24.Mob(_this.game, _this, _this.screen);
        mob.x = _this.screen.width * Math.random();
        mob.y = _this.screen.height * Math.random();
        mob.scale = 0.0001;
        mob.toScale = 0.1 + Math.random() * 0.3;
        mob.toSpeedX = Math.random();
        if (Math.round(Math.random()) === 0) {
          mob.toSpeedX *= -1;
        }
        mob.toSpeedY = Math.random();
        if (Math.round(Math.random()) === 0) {
          mob.toSpeedY *= -1;
        }
        _results.push(_this.mobs.push(mob));
      }
      return _results;
    });
  }

  SplashScene.prototype.selectNextItem = function() {
    var nextItem, selectedMenuItem;
    selectedMenuItem = $('.splash .menu .active');
    nextItem = selectedMenuItem.next('li');
    if (!(nextItem.length > 0)) {
      nextItem = $('.splash .menu li').first();
    }
    $('.splash .menu li').removeClass('active');
    nextItem.addClass('active');
    return selectedMenuItem = nextItem;
  };

  SplashScene.prototype.selectPrevItem = function() {
    var prevItem, selectedMenuItem;
    selectedMenuItem = $('.splash .menu .active');
    prevItem = selectedMenuItem.prev('li');
    if (!(prevItem.length > 0)) {
      prevItem = $('.splash .menu li').last();
    }
    $('.splash .menu li').removeClass('active');
    prevItem.addClass('active');
    return selectedMenuItem = prevItem;
  };

  SplashScene.prototype.generateParticles = function() {
    var i, particle, _i, _results;
    _results = [];
    for (i = _i = 0; _i < 50; i = ++_i) {
      particle = new LD24.Particle(this.game, this, this.screen);
      particle.x = Math.random() * this.screen.width;
      particle.y = Math.random() * this.screen.height;
      particle.scale = Math.random();
      particle.scrollX = this.scrollX;
      particle.scrollY = this.scrollY;
      particle.speedX = particle.toSpeedX = Math.random() * 0.05;
      if (Math.round(Math.random()) === 0) {
        particle.speedX *= -1;
      }
      particle.speedY = particle.toSpeedY = Math.random() * 0.05;
      if (Math.round(Math.random()) === 0) {
        particle.speedY *= -1;
      }
      _results.push(this.particles.push(particle));
    }
    return _results;
  };

  SplashScene.prototype.tick = function() {
    var dist, distX, distY, mob, mobRadius, otherMob, otherMobRadius, particle, _i, _j, _len, _len1, _ref2, _ref3, _results;
    _ref2 = this.particles;
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      particle = _ref2[_i];
      particle.tick();
    }
    _ref3 = this.mobs;
    _results = [];
    for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
      mob = _ref3[_j];
      if (mob.removed) {
        this.mobs = _.without(this.mobs, mob);
      } else {
        mob.tick();
      }
      _results.push((function() {
        var _k, _len2, _ref4, _results1;
        _ref4 = this.mobs;
        _results1 = [];
        for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {
          otherMob = _ref4[_k];
          if (mob.intersects(otherMob) && otherMob !== mob && !otherMob.absorbed) {
            mob.absorb(otherMob);
          }
          if (otherMob !== mob && !otherMob.absorbed && mob.attraction > 0 && !(otherMob instanceof LD24.Mobs.PowerUp) && !(otherMob instanceof LD24.Mobs.Bad)) {
            mobRadius = mob.spriteW / 2 * mob.scale;
            otherMobRadius = otherMob.spriteW / 2 * otherMob.scale;
            distX = mob.x - otherMob.x;
            distY = mob.y - otherMob.y;
            dist = Math.sqrt(Math.pow(Math.abs(distX), 2) + Math.pow(Math.abs(distY), 2)) - mobRadius - otherMobRadius;
            if (dist < 100) {
              otherMob.speedX = distX / 50;
              _results1.push(otherMob.speedY = distY / 50);
            } else {
              _results1.push(void 0);
            }
          } else {
            _results1.push(void 0);
          }
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  SplashScene.prototype.render = function() {
    var mob, particle, _i, _j, _len, _len1, _ref2, _ref3, _results;
    this.renderBackground();
    _ref2 = this.particles;
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      particle = _ref2[_i];
      particle.render();
    }
    _ref3 = this.mobs;
    _results = [];
    for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
      mob = _ref3[_j];
      _results.push(mob.render());
    }
    return _results;
  };

  SplashScene.prototype.renderBackground = function() {
    this.screen.save();
    this.screen.context.fillStyle = 'rgb(10,14,30)';
    this.screen.context.fillRect(0, 0, this.screen.width, this.screen.height);
    this.screen.context.drawImage(this.screen.background, this.scrollX / this.zoom, this.scrollY / this.zoom, this.screen.width / this.zoom, this.screen.height / this.zoom, 0, 0, this.screen.width, this.screen.height);
    return this.screen.restore();
  };

  SplashScene.prototype.terminate = function(callback) {
    var _this = this;
    $('canvas').fadeOut('slow');
    return $('.splash').fadeOut('slow', function() {
      return typeof callback === "function" ? callback() : void 0;
    });
  };

  SplashScene.prototype.showAbout = function() {
    var _this = this;
    this.player.toOpacity = 0;
    $('.splash').fadeOut('slow', function() {
      return $('div.about').fadeIn('slow');
    });
    return $('div.about .back').click(function() {
      return _this.hideAbout();
    });
  };

  SplashScene.prototype.hideAbout = function() {
    var _this = this;
    return $('div.about').fadeOut('slow', function() {
      _this.player.toOpacity = 1;
      return $('.splash').fadeIn('slow');
    });
  };

  return SplashScene;

})(EventEmitter);
