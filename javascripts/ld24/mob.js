// Generated by CoffeeScript 1.3.3
var Mob, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

if ((_ref = window.LD24) == null) {
  window.LD24 = {};
}

window.LD24.Mob = Mob = (function(_super) {

  __extends(Mob, _super);

  Mob.prototype.spriteW = 256;

  Mob.prototype.spriteH = 256;

  Mob.prototype.spriteX = 0;

  Mob.prototype.spriteY = 0;

  function Mob(game, scene, screen) {
    this.game = game;
    this.scene = scene;
    this.screen = screen;
    this.scale = 0.01 + Math.random() * 0.03;
    this.toScale = this.scale;
    this.x = 0;
    this.y = 0;
    this.speedX = 0;
    this.speedY = 0;
    this.toSpeedX = 0;
    this.toSpeedY = 0;
    this.maxSpeed = 0.1;
    this.absorbed = false;
    this.absorbingMob = null;
    this.rotation = 0;
    this.speedRotation = Math.random() * 0.5;
    this.powerupAttraction = false;
    this.powerupAttractionEndTick = 0;
    this.attraction = 0;
    this.tickCount = 0;
    this.opacity = this.toOpacity = 0.9;
  }

  Mob.prototype.tick = function() {
    this.opacity += (this.toOpacity - this.opacity) / 5;
    if (this.absorbingMob == null) {
      this.speedX += (this.toSpeedX - this.speedX) / 20;
      this.speedY += (this.toSpeedY - this.speedY) / 20;
      this.x += this.speedX;
      this.y += this.speedY;
    } else {
      if (this.absorbingMob) {
        this.toX = this.absorbingMob.x;
        this.toY = this.absorbingMob.y;
      }
      this.x += (this.toX - this.x) / 10;
      this.y += (this.toY - this.y) / 10;
    }
    if (this.x + this.spriteW * this.scale / 2 >= this.screen.width && this.speedX > 0) {
      this.speedX *= -1;
      this.toSpeedX *= -1;
    } else if (this.x - this.spriteW * this.scale / 2 <= 0 && this.speedX < 0) {
      this.speedX *= -1;
      this.toSpeedX *= -1;
    }
    if (this.y + this.spriteH * this.scale / 2 >= this.screen.height && this.speedY > 0) {
      this.speedY *= -1;
      this.toSpeedY *= -1;
    } else if (this.y - this.spriteH * this.scale / 2 <= 0 && this.speedY < 0) {
      this.speedY *= -1;
      this.toSpeedY *= -1;
    }
    this.scale += (this.toScale - this.scale) / 10;
    if (this.scale < 0.01) {
      this.emit("absorbed", this.absorbingMob);
      this.remove();
    }
    this.rotation += this.speedRotation;
    if (this.powerupAttraction && this.tickCount > this.powerupAttractionEndTick) {
      this.attraction = 0;
      this.powerupAttraction = false;
    }
    return this.tickCount++;
  };

  Mob.prototype.render = function() {
    var finalH, finalW, finalX, finalY;
    finalW = this.spriteW * this.scale * this.scene.zoom;
    finalH = this.spriteH * this.scale * this.scene.zoom;
    finalX = (this.x * this.scene.zoom - finalW / 2) - this.scene.scrollX;
    finalY = (this.y * this.scene.zoom - finalH / 2) - this.scene.scrollY;
    this.screen.save();
    if (this.opacity !== 1) {
      this.screen.context.globalAlpha = this.opacity;
    }
    this.screen.render(0, 0, 256, 256, finalX, finalY, finalW, finalH);
    this.screen.render(256, 0, 256, 256, finalX - this.speedX * 2 * this.scene.zoom, finalY - this.speedY * 2 * this.scene.zoom, finalW, finalH, this.rotation * (Math.PI / 180));
    return this.screen.restore();
  };

  Mob.prototype.intersects = function(mob) {
    var d, dx, dy;
    dx = Math.abs(this.x - mob.x);
    dy = Math.abs(this.y - mob.y);
    d = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));
    if (d > mob.spriteW * mob.scale / 2 + this.spriteW * this.scale / 2) {
      return false;
    }
    return true;
  };

  Mob.prototype.absorbedBy = function(mob) {
    this.absorbed = true;
    this.absorbingMob = mob;
    this.toScale = 0;
    return this.toOpacity = 0;
  };

  Mob.prototype.canBeAbsorbedBy = function(mob) {
    if (this.scale > mob.scale) {
      return false;
    }
    return true;
  };

  Mob.prototype.remove = function() {
    return this.removed = true;
  };

  Mob.prototype.absorb = function(mob) {
    if (mob.canBeAbsorbedBy(this) && !this.absorbed) {
      this.toScale = this.scale + mob.scale / 2;
      return mob.absorbedBy(this);
    }
  };

  return Mob;

})(EventEmitter);
