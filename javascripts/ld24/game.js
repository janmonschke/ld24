// Generated by CoffeeScript 1.3.3
var Game, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

if ((_ref = window.LD24) == null) {
  window.LD24 = {};
}

window.LD24.Game = Game = (function() {

  Game.prototype.ticksPerSecond = 60;

  Game.prototype.framesPerSecond = 60;

  function Game(canvas) {
    this.canvas = canvas;
    this.render = __bind(this.render, this);

    this.screen = new LD24.Screen(this, this.canvas);
    this.scene = new LD24.Scenes.Game(this, this.screen);
    this.setupTickLoop();
    this.setupRenderLoop();
  }

  Game.prototype.debug = function(msg) {
    return $('.debug').text(msg);
  };

  Game.prototype.setupStats = function() {
    this.stats = new Stats;
    this.stats.setMode(0);
    this.stats.domElement.style.position = 'absolute';
    this.stats.domElement.style.left = '0px';
    this.stats.domElement.style.top = '0px';
    return this.canvas.parent().append(this.stats.domElement);
  };

  Game.prototype.setupTickLoop = function() {
    var _this = this;
    return this.tickLoop = every(1000 / this.ticksPerSecond, function() {
      return _this.tick();
    });
  };

  Game.prototype.setupRenderLoop = function() {
    var _this = this;
    return this.renderLoop = every(1000 / this.framesPerSecond, function() {
      return _this.render();
    });
  };

  Game.prototype.pause = function() {
    clearInterval(this.tickLoop);
    return clearInterval(this.renderLoop);
  };

  Game.prototype.tick = function() {
    return this.scene.tick();
  };

  Game.prototype.render = function(timestamp) {
    var _ref1, _ref2;
    if ((_ref1 = this.stats) != null) {
      _ref1.begin();
    }
    this.screen.clear();
    this.scene.render();
    return (_ref2 = this.stats) != null ? _ref2.end() : void 0;
  };

  return Game;

})();
