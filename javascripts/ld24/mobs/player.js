// Generated by CoffeeScript 1.3.3
(function() {
  var Player, _base, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if ((_ref = window.LD24) == null) {
    window.LD24 = {};
  }

  if ((_ref1 = (_base = window.LD24).Mobs) == null) {
    _base.Mobs = {};
  }

  window.LD24.Mobs.Player = Player = (function(_super) {

    __extends(Player, _super);

    function Player(game, scene, screen) {
      this.game = game;
      this.scene = scene;
      this.screen = screen;
      Player.__super__.constructor.call(this, this.game, this.scene, this.screen);
      this.totalMaxSpeed = this.maxSpeed = 1;
      this.powerupSpeed = false;
      this.powerupSpeedEndTick = 0;
      this.handleInput();
      this.opacity = 1.0;
      this["protected"] = true;
      this.protectedEndTick = 60 * 2;
      this.absorbable = true;
    }

    Player.prototype.tick = function() {
      Player.__super__.tick.call(this);
      if (this.powerupSpeed && this.tickCount > this.powerupSpeedEndTick) {
        this.maxSpeed = this.totalMaxSpeed;
        this.powerupSpeed = false;
      }
      if (this["protected"] && this.tickCount > this.protectedEndTick) {
        return this["protected"] = false;
      }
    };

    Player.prototype.render = function() {
      var finalH, finalW, finalX, finalY;
      Player.__super__.render.call(this);
      finalW = this.spriteW * this.scale * this.scene.zoom;
      finalH = this.spriteH * this.scale * this.scene.zoom;
      finalX = (this.x * this.scene.zoom - finalW / 2) - this.scene.scrollX;
      finalY = (this.y * this.scene.zoom - finalH / 2) - this.scene.scrollY;
      this.screen.save();
      if (this.opacity !== 1) {
        this.screen.context.globalAlpha = this.opacity;
      }
      this.screen.render(0, 256, 256, 256, finalX - this.speedX * 2 * this.scene.zoom, finalY - this.speedY * 2 * this.scene.zoom, finalW, finalH);
      return this.screen.restore();
    };

    Player.prototype.absorb = function(mob) {
      if (!this.absorbing && mob.canBeAbsorbedBy(this)) {
        this.toScale = this.scale + mob.scale / 2;
        mob.absorbedBy(this);
        this.emit('absorb', this.toScale);
        return this.game.sounds.playSound('absorb');
      }
    };

    Player.prototype.canBeAbsorbedBy = function(mob) {
      if (this["protected"] || !this.absorbable) {
        return false;
      }
      if (mob instanceof LD24.Mobs.Bad) {
        return true;
      }
      if (this.scale > mob.scale) {
        return false;
      }
      return true;
    };

    Player.prototype.handleInput = function() {
      this.up = false;
      this.left = false;
      this.down = false;
      this.right = false;
      this.handleKeyboard();
      return this.handleTouch();
    };

    Player.prototype.handleKeyboard = function() {
      var _this = this;
      $(document).keydown(function(e) {
        if (jwerty.is('down', e) || jwerty.is('s', e)) {
          return _this.pressDown();
        } else if (jwerty.is('up', e) || jwerty.is('w', e)) {
          return _this.pressUp();
        } else if (jwerty.is('left', e) || jwerty.is('a', e)) {
          return _this.pressLeft();
        } else if (jwerty.is('right', e) || jwerty.is('d', e)) {
          return _this.pressRight();
        }
      });
      return $(document).keyup(function(e) {
        if (jwerty.is('down', e) || jwerty.is('s', e)) {
          _this.releaseDown();
        }
        if (jwerty.is('up', e) || jwerty.is('w', e)) {
          _this.releaseUp();
        }
        if (jwerty.is('left', e) || jwerty.is('a', e)) {
          _this.releaseLeft();
        }
        if (jwerty.is('right', e) || jwerty.is('d', e)) {
          return _this.releaseRight();
        }
      });
    };

    Player.prototype.handleTouch = function() {
      var _this = this;
      $(this.screen.canvas).mousemove(function(event) {
        var du, lr;
        _this.releaseAll();
        lr = _this.x;
        du = _this.y;
        if (event.offsetX > lr) {
          _this.pressRight();
          if (event.offsetY > du) {
            return _this.pressDown();
          } else {
            return _this.pressUp();
          }
        } else {
          _this.pressLeft();
          if (event.offsetY > du) {
            return _this.pressDown();
          } else {
            return _this.pressUp();
          }
        }
      });
      return $(this.screen.canvas).mouseup(function() {
        return _this.releaseAll();
      });
    };

    Player.prototype.pressDown = function() {
      this.toSpeedY = 1 * this.maxSpeed;
      return this.down = true;
    };

    Player.prototype.pressUp = function() {
      this.toSpeedY = -1 * this.maxSpeed;
      return this.up = true;
    };

    Player.prototype.pressLeft = function() {
      this.toSpeedX = -1 * this.maxSpeed;
      return this.left = true;
    };

    Player.prototype.pressRight = function() {
      this.toSpeedX = 1 * this.maxSpeed;
      return this.right = true;
    };

    Player.prototype.releaseDown = function() {
      this.toSpeedY = 0;
      if (this.up) {
        this.toSpeedY = -1 * this.maxSpeed;
      }
      return this.down = false;
    };

    Player.prototype.releaseUp = function() {
      this.toSpeedY = 0;
      if (this.down) {
        this.toSpeedY = this.maxSpeed;
      }
      return this.up = false;
    };

    Player.prototype.releaseLeft = function() {
      this.toSpeedX = 0;
      if (this.right) {
        this.toSpeedX = this.maxSpeed;
      }
      return this.left = false;
    };

    Player.prototype.releaseRight = function() {
      this.toSpeedX = 0;
      if (this.left) {
        this.toSpeedX = -1 * this.maxSpeed;
      }
      return this.right = false;
    };

    Player.prototype.releaseAll = function() {
      this.releaseDown();
      this.releaseUp();
      this.releaseLeft();
      return this.releaseRight();
    };

    return Player;

  })(LD24.Mob);

}).call(this);
